#!/usr/bin/automate -s std-default,std-c
%HDR-IN{
	macros.h.in
	ctypes.h.in
	types.h.in
	prototypes.h.in
}
%SYSHDR{
	sys/$:{%host-os}/generic/${%HDR}
	sys/$:{%host-os}/$:{%host-arch}/${%HDR}
}
%SYSCALL-IN{
	sys/$:{%host-os}/generic/syscalls.in
	sys/$:{%host-os}/$:{%host-arch}/syscalls.in
}
@include{
	inc/tertium/cpu.h
	inc/tertium/dat.h
	inc/tertium/fns.h
	inc/tertium/std.h
}
@library{
	lib/libtertium.a
}
@manpage{
	transform{
		module:glob
		glob:man/*
	}
}
inc/tertium/cpu.h{
	output:$3
	module:rules
	rules{
		headers
		syscalls
	}
	headers{
		module:map
		map:$:{%HDR-IN}
		apply{
			command{
				cat
				sys/$:{host-os}/generic/$:{<}
				sys/$:{host-os}/$:{host-arch}/$:{<}
			}
		}
	}
	syscalls{
		command{
			pipeline { cat $:{SYSCALL-IN} }
			awk -f inc/tertium/cpu.h.awk
		}
	}
	${%SYSHDR}
	inc/tertium/cpu.h.awk
}
lib/libtertium.a{
	module:cmd
	inject{
		c-files{
			module:glob
			glob:src/*/*.c
		}
		asm-files{
			module:glob
			glob:sys/$:{%host-os}/$:{%host-arch}/*.s
		}
	}
	cmd{
		${default.a}
		${c-files}.o
		${asm-files}.o
	}
	src/sys
}
src/sys{
	module:cmd
	cmd{
		command{
			if { mkdir $3 }
			pipeline { cat $:{%SYSCALL-IN} }
			cd $3
			awk -f ../sys.awk
		}
		${%SYSCALL-IN}
	}
	src/sys.awk
}
