/* dev macros */
#define C_MAJOR(a) \
((((uvlong)(a) & 0xFFFFF) >> 31 >> 1) | (((uvlong)(a) & 0xFFF) >> 8))
#define C_MINOR(a) \
((((uvlong)(a) & 0xFFFFFF) >> 12) | (((uvlong)(a) & 0xFF) >> 0))
#define C_MAKEDEV(a, b) \
((((uvlong)(a) & 0xFFFFF)  >> 32) | \
 (((uvlong)(a) & 0xFFFFFF) >> 12) | \
 (((uvlong)(a) & 0xFFF)    >>  8) | \
 (((uvlong)(a) & 0xFF)     >>  0))

/* limits macros */
#define C_NAMEMAX 255
#define C_PATHMAX 4095

#define C_ARGMAX 131072
#define C_CHILDMAX 999
#define C_HOSTNAMEMAX 255
#define C_LOGINNAMEMAX 256
#define C_NGROUPSMAX 32
#define C_OPENMAX 1024		/* !!! */
#define C_PAGESIZE 4096
#define C_SYMLOOPMAX 40		/* !!! */
#define C_TTYNAMEMAX 32		/* !!! */

#define C_CHARBIT 8
#define C_CHARMAX 0x7F
#define C_UCHARMAX 0xFF
#define C_INTMAX 0x7FFFFFFF
#define C_UINTMAX 0xFFFFFFFFU
#define C_LONGMAX 0x7FFFFFFFL
#define C_ULONGMAX 0xFFFFFFFFUL
#define C_SHRTMAX 0x7FFF
#define C_USHRTMAX 0xFFFFU
#define C_SIZEMAX 0x7FFFFFFFL
#define C_USIZEMAX 0xFFFFFFFFUL
#define C_VLONGMAX 0x7FFFFFFFFFFFFFFFLL
#define C_UVLONGMAX 0x7FFFFFFFFFFFFFFFULL
#define C_CHARMIN (-C_CHARMAX-1)
#define C_INTMIN (-C_INTMAX-1)
#define C_LONGMIN (-C_LONGMAX-1)
#define C_SHRTMIN (-C_SHRTMAX-1)
#define C_SIZEMIN (-C_SIZEMAX-1)
#define C_VLONGMIN (-C_VLONGMAX-1)

#define C_INT8MAX 0x7F
#define C_INT16MAX 0x7FFF
#define C_INT32MAX 0x7FFFFFFF
#define C_INT64MAX 0x7FFFFFFFFFFFFFFF
#define C_INT8MIN (-C_INT8MAX-1)
#define C_INT16MIN (-C_INT16MAX-1)
#define C_INT32MIN (-C_UINT32MAX-1)
#define C_INT64MIN (-C_UINT64MAX-1)
#define C_UINT8MAX 0xFF
#define C_UINT16MAX 0xFFFF
#define C_UINT32MAX 0xFFFFFFFFU
#define C_UINT64MAX 0xFFFFFFFFFFFFFFFFU

/* option macros */
#define C_OREAD 0x0
#define C_OWRITE 0x1
#define C_ORDWR 0x2

#define C_FDCEXEC 1
#define C_FDUPFD_CEXEC 1030

/* others macros
 * TODO: rename */
#define CLOCK_REALTIME 0
#define MAP_FAILED ((void *)-1)
#define MAP_SHARED 0x01
#define MAP_PRIVATE 0x02
#define PROT_READ 0x01
#define PROT_WRITE 0x02

#define C_SEEKSET 0
#define C_SEEKCUR 1
#define C_SEEKEND 2

#define _SC_ARG_MAX 0
#define _SC_CHILD_MAX 1
#define _SC_HOST_NAME_MAX 180
#define _SC_LOGIN_NAME_MAX 71
#define _SC_NGROUPS_MAX 3
#define _SC_OPEN_MAX 4
#define _SC_PAGESIZE 30
#define _SC_SYMLOOP_MAX 173
#define _SC_TTY_NAME_MAX 72
#define _SC_VERSION 29
#define _POSIX_VERSION 200809L

#define AT_FDCWD -100
#define AT_SYMLINK_NOFOLLOW 0x100
#define AT_SYMLINK_FOLLOW 0x400

/* stat macros */
#define C_IFMT 0xF000
#define C_IFBLK 0x6000
#define C_IFCHR 0x2000
#define C_IFDIR 0x4000
#define C_IFIFO 0x1000
#define C_IFLNK 0xA000
#define C_IFREG 0x8000
#define C_IFSCK 0xC000

#define C_ISBLK(a) (((a) & C_IFMT) == C_IFBLK)
#define C_ISCHR(a) (((a) & C_IFMT) == C_IFCHR)
#define C_ISDIR(a) (((a) & C_IFMT) == C_IFDIR)
#define C_ISFIFO(a) (((a) & C_IFMT) == C_IFIFO)
#define C_ISLNK(a) (((a) & C_IFMT) == C_IFLNK)
#define C_ISREG(a) (((a) & C_IFMT) == C_IFREG)
#define C_ISSCK(a) (((a) & C_IFMT) == C_IFSCK)

#define C_ISUID 04000
#define C_ISGID 02000
#define C_ISVTX 01000
#define C_IRUSR 00400
#define C_IWUSR 00200
#define C_IXUSR 00100
#define C_IRWXU 00700
#define C_IRGRP 00040
#define C_IWGRP 00020
#define C_IXGRP 00010
#define C_IRWXG 00070
#define C_IROTH 00004
#define C_IWOTH 00002
#define C_IXOTH 00001
#define C_IRWXO 00007

#define C_ACCESSPERMS (C_IRWXU|C_IRWXG|C_IRWXO)
#define C_ALLPERMS (C_ISUID|C_ISGID|C_ISVTX|C_IRWXU|C_IRWXG|C_IRWXO)
#define C_DEFFILEMODE (C_IRUSR|C_IWUSR|C_IRGRP|C_IWGRP|C_IROTH|C_IWOTH)

/* types */
typedef unsigned short ushort;
typedef unsigned char uchar;
typedef unsigned long ulong;
typedef unsigned int uint;
typedef long long vlong;
typedef unsigned long long uvlong;
typedef unsigned ctype_rune;

typedef int ctype_fd;
typedef int ctype_error;
typedef int ctype_status;

typedef __builtin_va_list va_list;

/* struct */
typedef struct ctype_iopause ctype_iopause;
typedef struct ctype_uts ctype_utsname;

struct ctype_iopause {
	int fd;
	short events;
	short revents;
};

struct ctype_uts {
	char sysname[65];
	char nodename[65];
	char release[65];
	char version[65];
	char machine[65];
	char domainname[65];
};

/* variadic macros */
#define va_arg(a, b) __builtin_va_arg(a, b)
#define va_copy(a, b) __builtin_va_copy(a, b)
#define va_end(a) __builtin_va_end(a)
#define va_start(a, b) __builtin_va_start(a, b)

/* */
long __asm_syscall(long, ...);
